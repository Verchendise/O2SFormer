{"env_info": "sys.platform: linux\nPython: 3.7.13 (default, Mar 29 2022, 02:18:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.13\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~16.04) 7.5.0\nPyTorch: 1.12.1+cu102\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1+cu102\nOpenCV: 4.6.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.28.2+", "config": "dataset_type = 'CULaneDataset'\ndata_root = '/home/fyj/zky/tusimple/culane/'\nfile_client_args = dict(backend='disk')\nori_img_w = 1640\nori_img_h = 590\nimg_w = 800\nimg_h = 320\ncut_height = 270\ntrain_pipeline = [\n    dict(\n        type='GenerateLaneLine',\n        keys=['img', 'lane_line', 'seg'],\n        img_info=(320, 800),\n        num_points=72,\n        max_lanes=4,\n        meta_keys=['img_metas'],\n        transforms=[\n            dict(\n                name='Resize',\n                parameters=dict(size=dict(height=320, width=800)),\n                p=1.0),\n            dict(name='HorizontalFlip', parameters=dict(p=1.0), p=0.5),\n            dict(name='ChannelShuffle', parameters=dict(p=1.0), p=0.1),\n            dict(\n                name='MultiplyAndAddToBrightness',\n                parameters=dict(mul=(0.85, 1.15), add=(-10, 10)),\n                p=0.6),\n            dict(\n                name='AddToHueAndSaturation',\n                parameters=dict(value=(-10, 10)),\n                p=0.7),\n            dict(\n                name='OneOf',\n                transforms=[\n                    dict(name='MotionBlur', parameters=dict(k=(3, 5))),\n                    dict(name='MedianBlur', parameters=dict(k=(3, 5)))\n                ],\n                p=0.2),\n            dict(\n                name='Affine',\n                parameters=dict(\n                    translate_percent=dict(x=(-0.1, 0.1), y=(-0.1, 0.1)),\n                    rotate=(-10, 10),\n                    scale=(0.8, 1.2)),\n                p=0.7),\n            dict(\n                name='Resize',\n                parameters=dict(size=dict(height=320, width=800)),\n                p=1.0)\n        ]),\n    dict(type='ToTensor_', keys=['img', 'lane_line', 'seg', 'img_metas'])\n]\ntest_pipeline = [\n    dict(\n        type='GenerateLaneLine',\n        keys=['img'],\n        meta_keys=['img_metas'],\n        img_info=(320, 800),\n        num_points=72,\n        max_lanes=4,\n        transforms=[\n            dict(\n                name='Resize',\n                parameters=dict(size=dict(height=320, width=800)),\n                p=1.0)\n        ],\n        training=False),\n    dict(type='ToTensor_', keys=['img', 'img_metas'])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=4,\n    train=dict(\n        type='CULaneDataset',\n        data_root='/home/fyj/zky/tusimple/culane/',\n        split='train',\n        cut_height=270,\n        img_fo=(590, 1640),\n        resize_img_info=(320, 800),\n        pipeline=[\n            dict(\n                type='GenerateLaneLine',\n                keys=['img', 'lane_line', 'seg'],\n                img_info=(320, 800),\n                num_points=72,\n                max_lanes=4,\n                meta_keys=['img_metas'],\n                transforms=[\n                    dict(\n                        name='Resize',\n                        parameters=dict(size=dict(height=320, width=800)),\n                        p=1.0),\n                    dict(name='HorizontalFlip', parameters=dict(p=1.0), p=0.5),\n                    dict(name='ChannelShuffle', parameters=dict(p=1.0), p=0.1),\n                    dict(\n                        name='MultiplyAndAddToBrightness',\n                        parameters=dict(mul=(0.85, 1.15), add=(-10, 10)),\n                        p=0.6),\n                    dict(\n                        name='AddToHueAndSaturation',\n                        parameters=dict(value=(-10, 10)),\n                        p=0.7),\n                    dict(\n                        name='OneOf',\n                        transforms=[\n                            dict(name='MotionBlur', parameters=dict(k=(3, 5))),\n                            dict(name='MedianBlur', parameters=dict(k=(3, 5)))\n                        ],\n                        p=0.2),\n                    dict(\n                        name='Affine',\n                        parameters=dict(\n                            translate_percent=dict(\n                                x=(-0.1, 0.1), y=(-0.1, 0.1)),\n                            rotate=(-10, 10),\n                            scale=(0.8, 1.2)),\n                        p=0.7),\n                    dict(\n                        name='Resize',\n                        parameters=dict(size=dict(height=320, width=800)),\n                        p=1.0)\n                ]),\n            dict(\n                type='ToTensor_',\n                keys=['img', 'lane_line', 'seg', 'img_metas'])\n        ]),\n    val=dict(\n        type='CULaneDataset',\n        data_root='/home/fyj/zky/tusimple/culane/',\n        split='test',\n        cut_height=270,\n        img_fo=(590, 1640),\n        resize_img_info=(320, 800),\n        pipeline=[\n            dict(\n                type='GenerateLaneLine',\n                keys=['img'],\n                meta_keys=['img_metas'],\n                img_info=(320, 800),\n                num_points=72,\n                max_lanes=4,\n                transforms=[\n                    dict(\n                        name='Resize',\n                        parameters=dict(size=dict(height=320, width=800)),\n                        p=1.0)\n                ],\n                training=False),\n            dict(type='ToTensor_', keys=['img', 'img_metas'])\n        ]),\n    test=dict(\n        type='CULaneDataset',\n        data_root='/home/fyj/zky/tusimple/culane/',\n        split='test',\n        cut_height=270,\n        img_fo=(590, 1640),\n        resize_img_info=(320, 800),\n        pipeline=[\n            dict(\n                type='GenerateLaneLine',\n                keys=['img'],\n                meta_keys=['img_metas'],\n                img_info=(320, 800),\n                num_points=72,\n                max_lanes=4,\n                transforms=[\n                    dict(\n                        name='Resize',\n                        parameters=dict(size=dict(height=320, width=800)),\n                        p=1.0)\n                ],\n                training=False),\n            dict(type='ToTensor_', keys=['img', 'img_metas'])\n        ]))\nwork_dir = './output_dir'\nevaluation = dict(interval=1, output_basedir='./output_dir', save_best='auto')\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [\n    dict(\n        type='ExpMomentumEMAHook',\n        resume_from=None,\n        momentum=0.0002,\n        priority=49)\n]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nnum_classes = 4\nnum_points = 72\nmodel = dict(\n    type='DNLATR',\n    num_queries=4,\n    with_random_refpoints=False,\n    num_patterns=0,\n    backbone=dict(\n        type='ResNet',\n        depth=18,\n        num_stages=4,\n        out_indices=(3, ),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet18')),\n    neck=dict(\n        type='ChannelMapper',\n        in_channels=[512],\n        kernel_size=1,\n        out_channels=256,\n        act_cfg=None,\n        norm_cfg=None,\n        num_outs=1),\n    encoder=dict(\n        num_layers=6,\n        layer_cfg=dict(\n            self_attn_cfg=dict(\n                embed_dims=256, num_heads=8, dropout=0.0, batch_first=True),\n            ffn_cfg=dict(\n                embed_dims=256,\n                feedforward_channels=2048,\n                num_fcs=2,\n                ffn_drop=0.0,\n                act_cfg=dict(type='PReLU')))),\n    decoder=dict(\n        num_layers=6,\n        query_dim=3,\n        query_scale_type='cond_elewise',\n        with_modulated_hw_attn=True,\n        layer_cfg=dict(\n            self_attn_cfg=dict(\n                embed_dims=256,\n                num_heads=8,\n                attn_drop=0.0,\n                proj_drop=0.0,\n                cross_attn=False),\n            cross_attn_cfg=dict(\n                embed_dims=256,\n                num_heads=8,\n                attn_drop=0.0,\n                proj_drop=0.0,\n                cross_attn=True),\n            ffn_cfg=dict(\n                embed_dims=256,\n                feedforward_channels=2048,\n                num_fcs=2,\n                ffn_drop=0.0,\n                act_cfg=dict(type='PReLU'))),\n        return_intermediate=True),\n    positional_encoding=dict(num_feats=128, temperature=20, normalize=True),\n    head=dict(\n        type='DNHead',\n        num_classes=4,\n        num_points=72,\n        img_info=(320, 800),\n        ori_img_info=(590, 1640),\n        cut_height=270,\n        assigner=dict(\n            type='HungarianLaneAssigner',\n            distance_cost=dict(type='Distance_cost', weight=3.0),\n            cls_cost=dict(type='FocalLossCost')),\n        loss_cls=dict(\n            type='FocalLoss', gamma=2.0, alpha=0.25, loss_weight=2.0),\n        loss_xyt=dict(type='SmoothL1Loss', loss_weight=0.2),\n        loss_iou=dict(type='Line_iou', loss_weight=2.0),\n        loss_seg=dict(\n            type='CrossEntropyLoss', loss_weight=1.0, ignore_index=255),\n        test_cfg=dict(conf_threshold=0.4)),\n    train_cfg=None,\n    test_cfg=None)\nbase_lr = 0.00025\ninterval = 1\noptimizer = dict(\n    type='AdamW',\n    lr=0.00025,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(\n        custom_keys=dict(backbone=dict(lr_mult=0.1, decay_mult=1.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=0.1, norm_type=2))\nmax_epochs = 50\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\nlr_config = dict(\n    policy='YOLOX',\n    warmup='exp',\n    by_epoch=False,\n    warmup_by_epoch=True,\n    warmup_ratio=1,\n    warmup_iters=5,\n    num_last_epochs=1,\n    min_lr_ratio=0.05)\nauto_resume = False\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "resnet_18_culane.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 5568, "data_time": 0.06759, "cls_loss": 0.13969, "reg_xytl_loss": 179.03467, "iou_loss": 0.57119, "seg_loss": 1.33444, "loss": 181.07999, "grad_norm": 53.79025, "time": 1.37502}
